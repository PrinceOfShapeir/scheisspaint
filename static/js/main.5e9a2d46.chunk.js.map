{"version":3,"sources":["Interface.js","Canvas.js","App.js","index.js"],"names":["Interface","props","canvasRef","useRef","actionType","setActionType","setPattern","pattern","color","setStyle","lineWidth","setLineWidth","beginPoint","endPoint","hollow","setHollow","clear","changeColor","e","target","value","changeLineWidth","console","log","useEffect","context","current","getContext","beginPath","rect","canvas","width","height","stroke","x","Math","round","y","strokeStyle","fillStyle","fillRect","moveTo","lineTo","clearRect","previewPane","PatternToggle","onClick","ColorSelect","onChange","style","backgroundColor","label","className","LineWidthSelect","type","max","min","step","onInput","HollowButton","Preview","ref","margins","Canvas","useState","setBeginPoint","Edgelines","drawing","isDrawing","drawCounter","setDrawCounter","setEndPoint","isHollow","cleared","mounted","setMounted","cachedXY","font","fillText","clientX","clientY","save","restore","onMouseOver","onMouseDown","onMouseMove","onMouseUp","App","active","setActive","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5e9a2d46.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState} from 'react';\r\nimport './interface.css';\r\n\r\n\r\nconst Interface = props => {\r\n\r\n    const canvasRef = useRef(null);\r\n    const actionType = props.actionType;\r\n    const setActionType = props.setActionType;\r\n    const setPattern = props.setPattern;\r\n    const pattern = props.pattern;\r\n    const color = props.color;\r\n    const setStyle = props.setStyle;\r\n    const lineWidth = props.lineWidth;\r\n    const setLineWidth = props.setLineWidth;\r\n    const beginPoint = props.beginPoint;\r\n    const endPoint = props.endPoint;\r\n    const hollow = props.hollow;\r\n    const setHollow = props.setHollow;\r\n    const clear = props.clear;\r\n\r\n    //const [previewCleared, setPreviewCleared] = useState(false);\r\n    //const [startedPreview, setStartedPreview] = useState(false);\r\n\r\n\r\n    \r\n\r\n    useEffect(()=>{\r\n        const preview = canvasRef.current;\r\n        const context = preview.getContext('2d');\r\n        context.beginPath();\r\n        context.rect(0, 0, context.canvas.width, context.canvas.height);\r\n        context.stroke();\r\n        //if(!startedPreview) setStartedPreview(!startedPreview);\r\n    }, [/*previewCleared*/]);\r\n\r\n    useEffect(()=>{\r\n\r\n        /*const clearPreview = (context) => {\r\n            context.clearRect(0,0,context.canvas.width-1, context.canvas.height-1);\r\n            //return setPreviewCleared(!previewCleared);\r\n        }*/\r\n\r\n        const previewPane = () => {\r\n        //should just be transformed copy of whatever is happening in Canvas, in between clicks.\r\n\r\n            if(beginPoint!==null){\r\n                const x = Math.round(beginPoint.x/10);\r\n                const y = Math.round(beginPoint.y/10);\r\n                const preview = canvasRef.current;\r\n                const context = preview.getContext('2d');\r\n                context.strokeStyle = color;\r\n                context.fillStyle = color;\r\n                //clearPreview(context);\r\n                //context.clearRect(2,2,context.canvas.width-2, context.canvas.height-2);\r\n\r\n                //move \\/ behind conditional if newer shapes interfere\r\n                context.fillRect(x, y, 1, 1);\r\n\r\n                if(endPoint!==null) {\r\n                    endPoint.x = Math.round(endPoint.x/10);\r\n                    endPoint.y = Math.round(endPoint.y/10);\r\n                }\r\n\r\n                if(actionType===\"rectangle\") {\r\n                \r\n                        \r\n                        //context.save();\r\n                    if (endPoint!==null) {\r\n                        \r\n                        //context.restore();\r\n                        //for leftward rects\r\n                        if(!hollow) context.fillRect(x, y, endPoint.x-x, endPoint.y-y);\r\n                        else {\r\n                            context.beginPath();\r\n                            context.rect(x, y, endPoint.x-x, endPoint.y-y);\r\n                            context.stroke();\r\n\r\n                        }\r\n                    }\r\n\r\n                }else if (actionType==='line') {\r\n\r\n                    if(endPoint!==null){\r\n\r\n                        context.beginPath();\r\n                        context.moveTo(x,y);\r\n                        context.lineTo(endPoint.x,endPoint.y);\r\n                        context.stroke();\r\n                    }\r\n\r\n                }\r\n            } else {\r\n                const canvas = canvasRef.current;\r\n                const context = canvas.getContext('2d');\r\n                //clearPreview(context);\r\n                context.clearRect(2,2,context.canvas.width-2, context.canvas.height-2);\r\n            }     \r\n        }\r\n        /*startedPreview && */previewPane();\r\n    }, [beginPoint, endPoint]);    \r\n\r\n\r\n\r\n\r\n\r\n    function changeColor (e) {\r\n        return setStyle(e.target.value);\r\n    }\r\n    function changeLineWidth (e) {\r\n\r\n        console.log(\"changing line width to \" + e.target.value);\r\n        return setLineWidth(e.target.value);\r\n\r\n    }\r\n\r\n\r\n\r\n    const PatternToggle = () => {\r\n\r\n        if(pattern==='solid') {\r\n            return (\r\n                <button onClick={()=>setPattern('broken')}>Solid</button>\r\n            );\r\n        } else if (pattern==='broken') {\r\n            return (\r\n                <button onClick={()=>setPattern('solid')}>Broken</button>\r\n            );\r\n        }\r\n\r\n    }\r\n\r\n    const ColorSelect = () => {\r\n\r\n        return (\r\n                <>\r\n                {/*<div className=\"flex-col\">\r\n                    <label>\r\n                        Color\r\n                    </label>*/}\r\n                    \r\n                        <select value={color} onChange={changeColor} style={{backgroundColor: color, color: color}}>\r\n                            <option value=\"#000000\" label=\"Color\" style={{color:'black', backgroundColor: 'black'}}>Black</option>\r\n                            <option value=\"#00FFFF\" style={{color:'aqua', backgroundColor: 'aqua'}}>Aqua</option>                    \r\n                            <option value=\"#0000FF\" style={{color:'blue', backgroundColor: 'blue'}}>Blue</option>\r\n                            <option value=\"#FF00FF\" style={{color:'fuchsia', backgroundColor: 'fuchsia'}}>Fuchsia</option>\r\n                            <option value=\"#808080\" style={{color:'gray', backgroundColor: 'gray'}}>Gray</option>\r\n                            <option value=\"#008000\" style={{color:'green', backgroundColor: 'green'}}>Green</option>\r\n                            <option value=\"#00FF00\" style={{color:'lime', backgroundColor: 'lime'}}>Lime</option>\r\n                            <option value=\"#800000\" style={{color:'maroon', backgroundColor: 'maroon'}}>Maroon</option>\r\n                            <option value=\"#000080\" style={{color:'navy', backgroundColor: 'navy'}}>Navy</option>\r\n                            <option value=\"#808000\" style={{color:'olive', backgroundColor: 'olive'}}>Olive</option>\r\n                            <option value=\"#800080\" style={{color:'purple', backgroundColor: 'purple'}}>Purple</option>\r\n                            <option value=\"#FF0000\" style={{color:'red', backgroundColor: 'red'}}>Red</option>\r\n                            <option value=\"#C0C0C0\" style={{color:'silver', backgroundColor: 'silver'}}>Silver</option>\r\n                            <option value=\"#008080\" style={{color:'teal', backgroundColor: 'teal'}}>Teal</option>\r\n                            <option value=\"#FFFFFF\" className='shadowed'>White</option>\r\n                            <option value=\"#FFFF00\" style={{color:'yellow', backgroundColor: 'yellow'}}>Yellow</option>\r\n                        \r\n                    </select>\r\n                    \r\n                   \r\n               {/*  </div> */}\r\n\r\n               </>\r\n\r\n\r\n            \r\n                \r\n            \r\n\r\n        );\r\n\r\n    }\r\n\r\n    const LineWidthSelect = () => {\r\n\r\n        return (\r\n            <div className=\"lineWidthSelect\">\r\n\r\n                <label>Line Width {lineWidth}</label>\r\n                \r\n                <input type=\"range\" className=\"range\" max=\"10.0\" min=\"0.01\" step=\"0.01\" value={lineWidth} onInput={changeLineWidth}></input>\r\n\r\n\r\n            </div>\r\n            \r\n        );\r\n    }\r\n\r\n    const HollowButton = () => {\r\n\r\n        return <button onClick={setHollow}>{hollow ? \"Hollow\" : \"Filled\"}</button>\r\n\r\n    }\r\n\r\n    const Preview = () => {\r\n\r\n        return (\r\n            <>\r\n                \r\n                <canvas ref={canvasRef} width=\"64\" height=\"38\" className=\"canvasPreview\"></canvas>\r\n            </>\r\n\r\n        );\r\n\r\n    }\r\n\r\n    return (\r\n       \r\n\r\n        <div className=\"flex-container\">\r\n            <Preview />\r\n            <button onClick={()=>setActionType('point')}>Point</button>\r\n            <button onClick={()=>setActionType('line')}>Line</button>\r\n            <button onClick={()=>setActionType('freedraw')}>Free Draw</button>\r\n            <button onClick={()=>setActionType('rectangle')}>Rectangle</button>\r\n            <button onClick={clear}>Clear</button>\r\n            <HollowButton />\r\n            <PatternToggle />\r\n            <LineWidthSelect />\r\n            <ColorSelect />\r\n            \r\n\r\n        </div>\r\n            \r\n            \r\n            \r\n        \r\n    );\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\nexport default Interface;\r\n\r\n\r\n\r\n\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport Interface from './Interface';\r\nimport './Canvas.css';\r\n\r\nconst margins = 10; //in px\r\nconst Canvas = props => {\r\n\r\n    const canvasRef = useRef(null);\r\n    const [actionType, setActionType] = useState('freedraw');\r\n    const [pattern, setPattern] = useState('solid');\r\n    const [color, setStyle] = useState('black');\r\n    const [beginPoint, setBeginPoint] = useState(null);\r\n    const [Edgelines, setEdgeLines] = useState(false);\r\n    const [drawing, isDrawing] = useState(false);\r\n    const [drawCounter, setDrawCounter] = useState(0);\r\n    const [lineWidth, setLineWidth] = useState(1.0);\r\n    const [endPoint, setEndPoint] = useState(null);\r\n    const [hollow, isHollow] = useState(false);\r\n    const [cleared, setCleared] = useState(false);\r\n    \r\n    const [mounted, setMounted] = useState(false);\r\n\r\n    const setHollow = () => {\r\n        isHollow(!hollow);\r\n    }\r\n\r\n    const cachedXY = {\r\n\r\n        x:0,\r\n        y:0\r\n\r\n    }\r\n\r\n    function clear() {\r\n        const canvas = canvasRef.current;\r\n        const context = canvas.getContext('2d');\r\n        context.clearRect(0,0,context.canvas.width-1, context.canvas.height-1);\r\n    }\r\n\r\n    useEffect(()=>{\r\n        const canvas = canvasRef.current;\r\n        const context = canvas.getContext('2d');\r\n        context.beginPath();\r\n        context.rect(0, 0, context.canvas.width, context.canvas.height);\r\n        context.stroke();\r\n        if(!mounted) {\r\n            context.font = \"15px Trebuchet\";\r\n            context.fillText(\"Color\", 590, 379);\r\n            context.fillText(\"Preview\", 0, 379);\r\n            context.font = \"45px Trebuchet\";\r\n            context.fillText(\"Click 'Clear' to begin drawing!\",45, 160);\r\n            setMounted(!mounted);\r\n        }\r\n    }, [cleared]);\r\n\r\n    function onClick (e) {\r\n        const canvas = canvasRef.current;\r\n        const context = canvas.getContext('2d');\r\n        context.lineWidth = lineWidth;\r\n        context.fillStyle = color;\r\n        context.strokeStyle = color;\r\n        console.log(color);\r\n\r\n        if(actionType==='point') {\r\n            \r\n            context.fillRect(e.clientX - margins, e.clientY - margins, 1, 1);\r\n        }\r\n        else if (actionType==='line') {\r\n\r\n            if(beginPoint===null){\r\n                setBeginPoint({x: e.clientX - margins, y: e.clientY - margins});\r\n                context.fillRect(e.clientX - margins, e.clientY - margins, 1, 1);\r\n                context.save();\r\n            }\r\n            else {\r\n                context.restore();\r\n                context.beginPath();\r\n                context.moveTo(beginPoint.x,beginPoint.y);\r\n                context.lineTo(e.clientX - margins,e.clientY - margins);\r\n                context.stroke();\r\n                setBeginPoint(null);\r\n            }\r\n\r\n\r\n        } else if (actionType==='rectangle') {\r\n\r\n            //todo: add code for open rectangle...\r\n\r\n            if(beginPoint===null){\r\n\r\n                setBeginPoint({x: e.clientX - margins, y: e.clientY - margins});\r\n                context.save();\r\n            } else {\r\n                context.restore();\r\n                if(!hollow) {\r\n                    context.fillRect(beginPoint.x, beginPoint.y, e.clientX - margins-beginPoint.x, e.clientY - margins-beginPoint.y);\r\n                } else {\r\n                    context.beginPath();\r\n                    context.rect(beginPoint.x, beginPoint.y, e.clientX - margins-beginPoint.x, e.clientY - margins-beginPoint.y);\r\n                    context.stroke();\r\n                }\r\n                \r\n                \r\n                \r\n                setBeginPoint(null);\r\n            }\r\n        }\r\n\r\n        else console.log(\"Somehow, an action type is not selected. This should not be possible. Panic is recommended.\")\r\n    }\r\n    function onMouseOver (e) {\r\n        \r\n\r\n        if(beginPoint!==null&&actionType==='line'&&Edgelines){\r\n            const canvas = canvasRef.current;\r\n            const context = canvas.getContext('2d');\r\n            context.strokeStyle = color;\r\n            context.lineWidth = lineWidth;\r\n            context.restore();\r\n            console.log(\"Should be drawing a temporary line\");\r\n            context.beginPath();\r\n            context.moveTo(beginPoint.x,beginPoint.y);\r\n            context.lineTo(e.clientX - margins,e.clientY - margins);\r\n            context.stroke();\r\n            \r\n        }\r\n\r\n    }\r\n\r\n    function onMouseDown (e){\r\n        \r\n        if(actionType==='freedraw') {\r\n\r\n            const canvas = canvasRef.current;\r\n            const context = canvas.getContext('2d');\r\n            context.lineWidth = lineWidth;\r\n            context.strokeStyle = color;\r\n            cachedXY.x = e.clientX - margins;\r\n            cachedXY.y = e.clientY - margins;\r\n            context.moveTo(e.clientX - margins, e.clientY - margins);\r\n            context.beginPath();\r\n            \r\n            isDrawing(!drawing);\r\n\r\n        }\r\n    }\r\n\r\n    function onMouseMove (e) {\r\n        \r\n            if(actionType==='freedraw') {\r\n\r\n                const canvas = canvasRef.current;\r\n                const context = canvas.getContext('2d');\r\n                \r\n                \r\n                if(drawing&&pattern==='solid') {\r\n                    \r\n                    //context.moveTo(cachedXY.x, cachedXY.y);\r\n                    //context.beginPath();\r\n                    context.lineTo(e.clientX - margins, e.clientY - margins);\r\n                    context.stroke();\r\n                    cachedXY.x = e.clientX - margins;\r\n                    cachedXY.y = e.clientY - margins;\r\n                    \r\n            \r\n                } else if (drawing&&pattern==='broken'){\r\n\r\n                context.lineTo(e.clientX - margins, e.clientY - margins);\r\n                setDrawCounter(drawCounter+1);\r\n\r\n                if(drawCounter>1) {\r\n\r\n                    context.stroke();\r\n                    context.moveTo(e.clientX - margins, e.clientY - margins);\r\n                    context.beginPath();\r\n                    setDrawCounter(0);\r\n\r\n                }\r\n\r\n            }\r\n                \r\n\r\n            }\r\n            //endpoint is used by the preview pane\r\n            if(beginPoint!==null){    \r\n                setEndPoint({x: e.clientX - margins, y: e.clientY - margins});\r\n            }\r\n\r\n    }\r\n\r\n    function onMouseUp (e) {\r\n\r\n        if(actionType==='freedraw'&&drawing) {\r\n\r\n            const canvas = canvasRef.current;\r\n            const context = canvas.getContext('2d');\r\n            //context.moveTo(cachedXY.x, cachedXY.y);\r\n            context.lineTo(e.clientX - margins, e.clientY - margins);\r\n            context.stroke();\r\n\r\n            isDrawing(!drawing);\r\n        }\r\n\r\n\r\n    }\r\n\r\n    return (\r\n\r\n        <>\r\n            <div className=\"canvasContainer\">\r\n                <canvas className=\"mainCanvas\" ref={canvasRef} width=\"640\" height=\"380\" onClick={onClick} onMouseOver={onMouseOver} onMouseDown={onMouseDown} onMouseMove={onMouseMove} onMouseUp={onMouseUp}{...props}/>\r\n            </div>\r\n            \r\n            <Interface className=\"interface\"beginPoint={beginPoint} endPoint={endPoint} width=\"64\" height=\"38\" actionType={actionType} setActionType={setActionType} setPattern={setPattern} pattern={pattern} setStyle={setStyle} color={color} lineWidth={lineWidth} setLineWidth={setLineWidth} hollow={hollow} setHollow={setHollow} clear={clear}/>\r\n        </>\r\n\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Canvas;","import React, {useState} from 'react';\nimport Canvas from './Canvas';\nimport \"./app.css\"\n\nfunction App() {\n\n  const [active, setActive] = useState(0);\n\n  if (!active) return (\n    <>\n      <h1>A Paint Type App</h1>\n      <p>This is meant to emulate the functionality of the original PC Paint program, used to create 16 color EGA bitmap art. </p>\n      <p>You may view and comment on the source code at <a href=\"https://princeofshapeir.github.io/scheisspaint/\">Github</a>.</p>\n      <button onClick={()=>setActive(!active)}>Start Drawing</button>\n    </>\n  );\n  else return (\n    <Canvas />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}